package com.example.snakegame

import android.content.Context
import android.os.Build
import android.os.Vibrator
import androidx.compose.animation.core.*
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.gestures.detectDragGestures
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.draw.clip
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.geometry.Size
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.StrokeCap
import androidx.compose.ui.graphics.drawscope.DrawScope
import androidx.compose.ui.graphics.drawscope.Stroke
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import kotlinx.coroutines.delay
import kotlin.math.abs
import kotlin.random.Random

// –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ –∏–≥—Ä–µ

/**
 * –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è –≥–æ–ª–æ–≤—ã –∑–º–µ–π–∫–∏.
 */
val DarkGreen = Color(0xFF1B5E20) // –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è –≥–æ–ª–æ–≤—ã –∑–º–µ–π–∫–∏

/**
 * –°—Ä–µ–¥–Ω–∏–π –∑–µ–ª–µ–Ω—ã–π –¥–ª—è —Ç–µ–ª–∞ –∑–º–µ–π–∫–∏.
 */
val MediumGreen = Color(0xFF2E7D32)

/**
 * –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è —Ö–≤–æ—Å—Ç–∞ –∑–º–µ–π–∫–∏.
 */
val LightGreen = Color(0xFF43A047)

/**
 * –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ–±—ã—á–Ω–æ–π –µ–¥—ã.
 */
val AppleRed = Color(0xFFD32F2F)

/**
 * –ó–æ–ª–æ—Ç–æ–π –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –µ–¥—ã.
 */
val GoldenFood = Color(0xFFFFC107)

/**
 * –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –µ–¥—ã –≤ –∏–≥—Ä–µ.
 * - REGULAR: –æ–±—ã—á–Ω–∞—è –µ–¥–∞, –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤.
 * - GOLDEN: –∑–æ–ª–æ—Ç–∞—è –µ–¥–∞, –¥–æ–±–∞–≤–ª—è–µ—Ç –±–æ–ª—å—à–µ –æ—á–∫–æ–≤.
 */
enum class FoodType {
    REGULAR,
    GOLDEN
}

/**
 * –ö–ª–∞—Å—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –µ–¥—ã –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ.
 *
 * @param position –ü–æ–∑–∏—Ü–∏—è –µ–¥—ã –Ω–∞ —Å–µ—Ç–∫–µ.
 * @param type –¢–∏–ø –µ–¥—ã (–æ–±—ã—á–Ω–∞—è –∏–ª–∏ –∑–æ–ª–æ—Ç–∞—è).
 */
data class Food(
    val position: Position,
    val type: FoodType = FoodType.REGULAR
)

/**
 * –ö–ª–∞—Å—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —Å–µ—Ç–∫–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.
 *
 * @param x –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø–æ –æ—Å–∏ X.
 * @param y –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø–æ –æ—Å–∏ Y.
 */
data class Position(val x: Int, val y: Int)

/**
 * –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–≤–∏–∂–µ–Ω–∏—è –∑–º–µ–π–∫–∏.
 * - UP: –≤–≤–µ—Ä—Ö.
 * - DOWN: –≤–Ω–∏–∑.
 * - LEFT: –≤–ª–µ–≤–æ.
 * - RIGHT: –≤–ø—Ä–∞–≤–æ.
 * - NONE: –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è (–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ).
 */
enum class Direction {
    UP, DOWN, LEFT, RIGHT, NONE
}

/**
 * –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã.
 *
 * @param speedMultiplier –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è –∑–º–µ–π–∫–∏.
 * @param foodFrequency –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–æ–ª–æ—Ç–æ–π –µ–¥—ã (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö).
 */
enum class GameDifficulty(val speedMultiplier: Float, val foodFrequency: Int) {
    EASY(0.7f, 30), // –õ–µ–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å: –º–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å, —á–∞—Å—Ç–∞—è –∑–æ–ª–æ—Ç–∞—è –µ–¥–∞
    NORMAL(1.0f, 20), // –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —á–∞—Å—Ç–æ—Ç–∞
    HARD(1.3f, 10) // –°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å, —Ä–µ–¥–∫–∞—è –∑–æ–ª–æ—Ç–∞—è –µ–¥–∞
}

@Composable
        /**
         * –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω –∏–≥—Ä—ã "–ó–º–µ–π–∫–∞".
         * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–µ, –∑–º–µ–π–∫—É, –µ–¥—É, –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
         *
         * @param onGameOver –û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞.
         * @param difficulty –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é [GameDifficulty.NORMAL].
         * @exception VibrationUnavailable –ï—Å–ª–∏ –≤–∏–±—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ, —ç—Ñ—Ñ–µ–∫—Ç –≤–∏–±—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ–µ–¥–∞–Ω–∏–∏ –µ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
         * @result –ü–æ—Å–ª–µ –ø–æ–µ–¥–∞–Ω–∏—è –æ–±—ã—á–Ω–æ–π –µ–¥—ã (üü¢) –∑–º–µ–π–∫–∞ –≤—ã—Ä–∞—Å—Ç–µ—Ç –Ω–∞ 1 —Å–µ–≥–º–µ–Ω—Ç, –∞ —Å—á–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—Å—è –Ω–∞ 10 –æ—á–∫–æ–≤. –ü–æ—Å–ª–µ –ø–æ–µ–¥–∞–Ω–∏—è –∑–æ–ª–æ—Ç–æ–π –µ–¥—ã (üü°) –∑–º–µ–π–∫–∞ –≤—ã—Ä–∞—Å—Ç–µ—Ç –Ω–∞ 1 —Å–µ–≥–º–µ–Ω—Ç, –∞ —Å—á–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—Å—è –Ω–∞ 30 –æ—á–∫–æ–≤.
         * @usage
         * 1. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ (3-2-1-–°–¢–ê–†–¢!).
         * 2. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø–∞–ª—å—Ü–µ–º –ø–æ —ç–∫—Ä–∞–Ω—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–º–µ–π–∫–æ–π (–≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑, –≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ).
         * 3. –°–æ–±–∏—Ä–∞–π—Ç–µ –µ–¥—É –¥–ª—è —Ä–æ—Å—Ç–∞ –∏ –Ω–∞–±–æ—Ä–∞ –æ—á–∫–æ–≤.
         * 4. –ù–∞–∂–º–∏—Ç–µ "II" –¥–ª—è –ø–∞—É–∑—ã, "‚ñ∂" –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
         * @traceability –°–º. `GameScreenUITest` –¥–ª—è UI-—Ç–µ—Å—Ç–æ–≤ –∏ `GameLogicTest` –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ª–æ–≥–∏–∫–∏.
         * @priority High - –≠—Ç–æ—Ç —ç–∫—Ä–∞–Ω —è–≤–ª—è–µ—Ç—Å—è —è–¥—Ä–æ–º –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω –¥–ª—è –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
         * @verification
         * - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è –∑–º–µ–π–∫–∏ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ (—Å–º. `testMoveSnakeRight` –≤ `GameLogicTest`).
         * - –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç–∞: +10 –¥–ª—è –æ–±—ã—á–Ω–æ–π –µ–¥—ã, +30 –¥–ª—è –∑–æ–ª–æ—Ç–æ–π (—Å–º. `GameScreenUITest`).
         */
fun GameScreen(
    onGameOver: (Int) -> Unit,
    difficulty: GameDifficulty = GameDifficulty.NORMAL
) {
    val gridSize = 20 // –†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è (20x20 –∫–ª–µ—Ç–æ–∫)
    val context = LocalContext.current // –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º —Å–µ—Ä–≤–∏—Å–∞–º (–≤–∏–±—Ä–∞—Ü–∏—è)

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    var score by remember { mutableStateOf(0) } // –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç –∏–≥—Ä–æ–∫–∞
    var snake by remember {
        mutableStateOf(
            when (difficulty) {
                GameDifficulty.EASY -> listOf(Position(gridSize / 2, gridSize / 2)) // –ù–∞—á–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 1 –¥–ª—è –ª–µ–≥–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
                GameDifficulty.NORMAL -> List(3) { Position(gridSize / 2 - it, gridSize / 2) } // –î–ª–∏–Ω–∞ 3 –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ
                GameDifficulty.HARD -> List(5) { Position(gridSize / 2 - it, gridSize / 2) } // –î–ª–∏–Ω–∞ 5 –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ
            }
        )
    } // –ü–æ–∑–∏—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∑–º–µ–π–∫–∏
    var food by remember { mutableStateOf(generateFood(gridSize, snake, FoodType.REGULAR)) } // –ü–æ–∑–∏—Ü–∏—è –∏ —Ç–∏–ø –µ–¥—ã
    var direction by remember { mutableStateOf(Direction.NONE) } // –¢–µ–∫—É—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
    var gameRunning by remember { mutableStateOf(true) } // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã
    var gameSpeed by remember { mutableStateOf(300L) } // –°–∫–æ—Ä–æ—Å—Ç—å –∏–≥—Ä—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    var isPaused by remember { mutableStateOf(false) } // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—É–∑—ã
    var showCountdown by remember { mutableStateOf(true) } // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
    var countdown by remember { mutableStateOf(3) } // –ó–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞

    // –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
    val obstacles = remember {
        if (difficulty == GameDifficulty.HARD) {
            List(5) { Position(Random.nextInt(gridSize), Random.nextInt(gridSize)) }
                .filter { it !in snake && it != food.position } // –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å –∑–º–µ–π–∫–æ–π –∏ –µ–¥–æ–π
        } else emptyList()
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∞ –¥–ª—è –∑–æ–ª–æ—Ç–æ–π –µ–¥—ã
    val foodScale by animateFloatAsState(
        targetValue = if (food.type == FoodType.GOLDEN) 1.2f else 1.0f,
        animationSpec = tween(durationMillis = 500),
        label = "foodScale"
    )

    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã
    LaunchedEffect(key1 = true) {
        while (countdown > 0) {
            delay(1000) // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞
            countdown--
        }
        showCountdown = false
        direction = Direction.RIGHT // –ù–∞—á–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø—Ä–∞–≤–æ
        gameRunning = true
    }

    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏–µ–º –∑–º–µ–π–∫–∏
    LaunchedEffect(key1 = Unit) {
        while (true) {
            if (!gameRunning || isPaused || showCountdown) {
                delay(100) // –ü–∞—É–∑–∞ –ø—Ä–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ
                continue
            }

            val adjustedSpeed = (gameSpeed * difficulty.speedMultiplier).toLong() // –°–∫–æ—Ä–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            delay(adjustedSpeed)

            if (direction != Direction.NONE) {
                snake = moveSnake(snake, direction, food.position, gridSize, obstacles) { newFoodPosition, points ->
                    val foodType = if (Random.nextInt(100) < difficulty.foodFrequency) FoodType.GOLDEN else FoodType.REGULAR
                    food = Food(newFoodPosition, foodType)
                    val adjustedPoints = if (food.type == FoodType.GOLDEN) points * 3 else points // –ó–æ–ª–æ—Ç–∞—è –µ–¥–∞ –¥–∞–µ—Ç –±–æ–ª—å—à–µ –æ—á–∫–æ–≤
                    score += adjustedPoints
                    gameSpeed = maxOf(80L, 300L - (score / 5) * 5) // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å —Ä–æ—Å—Ç–æ–º —Å—á–µ—Ç–∞

                    // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–µ–¥–∞–Ω–∏–∏ –µ–¥—ã
                    val vibrator = context.getSystemService(Context.VIBRATOR_SERVICE) as Vibrator
                    if (Build.VERSION.SDK_INT >= 26) {
                        vibrator.vibrate(android.os.VibrationEffect.createOneShot(100, android.os.VibrationEffect.DEFAULT_AMPLITUDE))
                    } else {
                        vibrator.vibrate(100)
                    }
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ
                if (isCollision(snake, gridSize, obstacles)) {
                    gameRunning = false
                    onGameOver(score)
                }
            }
        }
    }

    // –¶–≤–µ—Ç–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –¥–ª—è —Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    val gradientColors = when (difficulty) {
        GameDifficulty.EASY -> listOf(Color(0xFF4CAF50), Color(0xFF81C784)) // –ó–µ–ª–µ–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –ª–µ–≥–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
        GameDifficulty.NORMAL -> listOf(Color(0xFFFFC107), Color(0xFFFFECB3)) // –ñ–µ–ª—Ç—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ
        GameDifficulty.HARD -> listOf(Color(0xFFF44336), Color(0xFFEF9A9A)) // –ö—Ä–∞—Å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —ç–∫—Ä–∞–Ω–∞
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(MaterialTheme.colorScheme.background)
            .padding(16.dp)
    ) {
        Column(
            modifier = Modifier.fillMaxSize(),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            // –ü–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π –ø–∞—É–∑—ã
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 16.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                Box(
                    modifier = Modifier
                        .background(
                            color = when (difficulty) {
                                GameDifficulty.EASY -> Color(0xFF4CAF50)
                                GameDifficulty.NORMAL -> Color(0xFFFFC107)
                                GameDifficulty.HARD -> Color(0xFFF44336)
                            },
                            shape = RoundedCornerShape(8.dp)
                        )
                        .padding(horizontal = 12.dp, vertical = 4.dp)
                ) {
                    Text(
                        text = when (difficulty) {
                            GameDifficulty.EASY -> "–õ–µ–≥–∫–∏–π"
                            GameDifficulty.NORMAL -> "–°—Ä–µ–¥–Ω–∏–π"
                            GameDifficulty.HARD -> "–°–ª–æ–∂–Ω—ã–π"
                        },
                        color = Color.White,
                        fontWeight = FontWeight.Bold
                    )
                }

                // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç–∞
                Box(
                    modifier = Modifier
                        .background(Color(0xFF2196F3), RoundedCornerShape(8.dp))
                        .padding(horizontal = 16.dp, vertical = 8.dp)
                ) {
                    Text(
                        text = "–°—á–µ—Ç: $score",
                        fontSize = 20.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color.White
                    )
                }

                // –ö–Ω–æ–ø–∫–∞ –ø–∞—É–∑—ã/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                Button(
                    onClick = { isPaused = !isPaused },
                    modifier = Modifier.padding(4.dp),
                    shape = CircleShape
                ) {
                    Text(
                        text = if (isPaused) "‚ñ∂" else "II",
                        fontSize = 16.sp,
                        fontWeight = FontWeight.Bold
                    )
                }
            }

            // –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .aspectRatio(1f) // –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –ø–æ–ª–µ
                    .clip(RoundedCornerShape(16.dp))
                    .background(Brush.verticalGradient(gradientColors))
                    .border(2.dp, Color(0xFFB0BEC5), RoundedCornerShape(16.dp))
                    .pointerInput(Unit) {
                        detectDragGestures { change, dragAmount ->
                            if (!isPaused && !showCountdown) {
                                change.consume()
                                val (x, y) = dragAmount
                                when {
                                    abs(x) > abs(y) -> {
                                        if (x > 0 && direction != Direction.LEFT) direction = Direction.RIGHT
                                        else if (x < 0 && direction != Direction.RIGHT) direction = Direction.LEFT
                                    }
                                    else -> {
                                        if (y > 0 && direction != Direction.UP) direction = Direction.DOWN
                                        else if (y < 0 && direction != Direction.DOWN) direction = Direction.UP
                                    }
                                }
                            }
                        }
                    }
            ) {
                // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
                Canvas(modifier = Modifier.fillMaxSize()) {
                    val cellSize = size.width / gridSize

                    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ—Ç–∫–∏
                    for (i in 0 until gridSize) {
                        for (j in 0 until gridSize) {
                            val isEvenCell = (i + j) % 2 == 0
                            drawRect(
                                color = if (isEvenCell) Color(0xFFD7CCC8) else Color(0xFFEFEBE9),
                                topLeft = Offset(i * cellSize, j * cellSize),
                                size = Size(cellSize, cellSize),
                                style = Stroke(width = 1.dp.toPx(), cap = StrokeCap.Round)
                            )
                        }
                    }

                    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–º–µ–π–∫–∏
                    drawSnake(snake, cellSize)

                    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
                    obstacles.forEach {
                        drawRect(
                            color = Color.Gray,
                            topLeft = Offset(it.x * cellSize, it.y * cellSize),
                            size = Size(cellSize, cellSize)
                        )
                    }

                    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –µ–¥—ã
                    val foodPos = food.position
                    val centerX = (foodPos.x * cellSize) + (cellSize / 2)
                    val centerY = (foodPos.y * cellSize) + (cellSize / 2)
                    val radius = (cellSize / 2) * foodScale * 0.8f
                    val foodColor = if (food.type == FoodType.GOLDEN) GoldenFood else AppleRed

                    drawCircle(
                        color = foodColor,
                        center = Offset(centerX, centerY),
                        radius = radius,
                        style = Stroke(width = 2.dp.toPx())
                    )

                    if (food.type == FoodType.REGULAR) {
                        // –°—Ç–µ–±–µ–ª—å –¥–ª—è –æ–±—ã—á–Ω–æ–π –µ–¥—ã
                        drawLine(
                            color = Color(0xFF795548),
                            start = Offset(centerX, centerY - radius),
                            end = Offset(centerX, centerY - radius * 1.3f),
                            strokeWidth = cellSize * 0.1f,
                            cap = StrokeCap.Round
                        )
                    } else {
                        // –ë–ª–µ—Å–∫ –¥–ª—è –∑–æ–ª–æ—Ç–æ–π –µ–¥—ã
                        drawCircle(
                            color = Color(0xFFFFFFFF),
                            center = Offset(centerX - radius * 0.3f, centerY - radius * 0.3f),
                            radius = radius * 0.15f
                        )
                    }
                }

                // –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
                if (showCountdown) {
                    Box(
                        modifier = Modifier
                            .fillMaxSize()
                            .background(Color(0x99000000)),
                        contentAlignment = Alignment.Center
                    ) {
                        Text(
                            text = if (countdown > 0) countdown.toString() else "–°–¢–ê–†–¢!",
                            color = Color.White,
                            fontSize = 64.sp,
                            fontWeight = FontWeight.Bold
                        )
                    }
                }

                // –≠–∫—Ä–∞–Ω –ø–∞—É–∑—ã
                if (isPaused && !showCountdown) {
                    Box(
                        modifier = Modifier
                            .fillMaxSize()
                            .background(Color(0x99000000)),
                        contentAlignment = Alignment.Center
                    ) {
                        Text(
                            text = "–ü–ê–£–ó–ê",
                            color = Color.White,
                            fontSize = 48.sp,
                            fontWeight = FontWeight.Bold
                        )
                    }
                }
            }

            // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é
            Spacer(modifier = Modifier.height(24.dp))
            Text(
                text = "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø–∞–ª—å—Ü–µ–º –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–º–µ–π–∫–æ–π\nüü¢ - –û–±—ã—á–Ω–∞—è –µ–¥–∞ (+10 –æ—á–∫–æ–≤)\nüü° - –ó–æ–ª–æ—Ç–∞—è –µ–¥–∞ (+30 –æ—á–∫–æ–≤)",
                textAlign = TextAlign.Center,
                fontSize = 14.sp,
                modifier = Modifier.alpha(0.7f)
            )
        }
    }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∑–º–µ–π–∫–∏ –Ω–∞ —Ö–æ–ª—Å—Ç–µ.
 *
 * @param snake –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∑–º–µ–π–∫–∏.
 * @param cellSize –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π —è—á–µ–π–∫–∏ —Å–µ—Ç–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö.
 */
private fun DrawScope.drawSnake(snake: List<Position>, cellSize: Float) {
    snake.forEachIndexed { index, position ->
        val centerX = (position.x * cellSize) + (cellSize / 2)
        val centerY = (position.y * cellSize) + (cellSize / 2)
        val segmentIndex = index.toFloat() / snake.size.toFloat()
        val segmentColor = when {
            index == 0 -> DarkGreen // –ì–æ–ª–æ–≤–∞
            segmentIndex < 0.3f -> MediumGreen // –ù–∞—á–∞–ª–æ —Ç–µ–ª–∞
            segmentIndex < 0.7f -> MediumGreen // –°–µ—Ä–µ–¥–∏–Ω–∞ —Ç–µ–ª–∞
            else -> LightGreen // –•–≤–æ—Å—Ç
        }
        val snakeRadius = if (index == 0) cellSize * 0.45f else cellSize * 0.4f

        if (index == 0) {
            // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥–æ–ª–æ–≤—ã —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
            drawCircle(
                brush = Brush.radialGradient(
                    colors = listOf(DarkGreen, MediumGreen),
                    center = Offset(centerX, centerY),
                    radius = snakeRadius * 1.2f
                ),
                center = Offset(centerX, centerY),
                radius = snakeRadius
            )
            val eyeOffset = snakeRadius * 0.4f
            // –ì–ª–∞–∑–∞
            drawCircle(color = Color.White, center = Offset(centerX - eyeOffset, centerY - eyeOffset), radius = snakeRadius * 0.2f)
            drawCircle(color = Color.White, center = Offset(centerX + eyeOffset, centerY - eyeOffset), radius = snakeRadius * 0.2f)
            drawCircle(color = Color.Black, center = Offset(centerX - eyeOffset, centerY - eyeOffset), radius = snakeRadius * 0.1f)
            drawCircle(color = Color.Black, center = Offset(centerX + eyeOffset, centerY - eyeOffset), radius = snakeRadius * 0.1f)
        } else {
            // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ–ª–∞
            drawCircle(color = segmentColor, center = Offset(centerX, centerY), radius = snakeRadius)
            drawCircle(
                color = Color.White.copy(alpha = 0.3f),
                center = Offset(centerX - snakeRadius * 0.3f, centerY - snakeRadius * 0.3f),
                radius = snakeRadius * 0.2f
            )
        }
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–º–µ–π–∫–∏ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.
 *
 * @param snake –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –∑–º–µ–π–∫–∏.
 * @param direction –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è.
 * @param foodPosition –ü–æ–∑–∏—Ü–∏—è –µ–¥—ã.
 * @param gridSize –†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏.
 * @param obstacles –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π.
 * @param onFoodEaten –û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –ø—Ä–∏ –ø–æ–µ–¥–∞–Ω–∏–∏ –µ–¥—ã —Å –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–µ–π –µ–¥—ã –∏ –æ—á–∫–∞–º–∏.
 * @return –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –∑–º–µ–π–∫–∏.
 */
fun moveSnake(
    snake: List<Position>,
    direction: Direction,
    foodPosition: Position,
    gridSize: Int,
    obstacles: List<Position>,
    onFoodEaten: (Position, Int) -> Unit
): List<Position> {
    val head = snake.first()
    val newHead = when (direction) {
        Direction.UP -> Position(head.x, (head.y - 1 + gridSize) % gridSize)
        Direction.DOWN -> Position(head.x, (head.y + 1) % gridSize)
        Direction.LEFT -> Position((head.x - 1 + gridSize) % gridSize, head.y)
        Direction.RIGHT -> Position((head.x + 1) % gridSize, head.y)
        Direction.NONE -> head
    }

    if (newHead in obstacles) return snake // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ–º

    return if (newHead.x == foodPosition.x && newHead.y == foodPosition.y) {
        val newFood = generateFood(gridSize, snake + newHead, FoodType.REGULAR)
        onFoodEaten(newFood.position, 10)
        listOf(newHead) + snake // –†–æ—Å—Ç –∑–º–µ–π–∫–∏
    } else {
        listOf(newHead) + snake.dropLast(1) // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±–µ–∑ —Ä–æ—Å—Ç–∞
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –µ–¥—ã –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–π –Ω–µ–∑–∞–Ω—è—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏.
 *
 * @param gridSize –†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏.
 * @param snake –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –∑–º–µ–π–∫–∏.
 * @param foodType –¢–∏–ø –µ–¥—ã.
 * @return –ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç [Food].
 */
fun generateFood(gridSize: Int, snake: List<Position>, foodType: FoodType): Food {
    val allPositions = (0 until gridSize).flatMap { x -> (0 until gridSize).map { y -> Position(x, y) } }
    val availablePositions = allPositions.filter { it !in snake }
    return Food(position = availablePositions[Random.nextInt(availablePositions.size)], type = foodType)
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è –∑–º–µ–π–∫–∏ —Å —Å–æ–±–æ–π –∏–ª–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è–º–∏.
 *
 * @param snake –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –∑–º–µ–π–∫–∏.
 * @param gridSize –†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏.
 * @param obstacles –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π.
 * @return true, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ, –∏–Ω–∞—á–µ false.
 */
private fun isCollision(snake: List<Position>, gridSize: Int, obstacles: List<Position>): Boolean {
    val head = snake.first()
    return snake.subList(1, snake.size).any { it.x == head.x && it.y == head.y } || head in obstacles
}